// Template name: SwiftCopy
// Template version: 1.0

import Foundation
{% macro includeImports type %}
    {% for import in type.imports %}
import {{ import }}
    {% endfor %}
{% endmacro %}

public enum OptionalCopy<T> {
    case update(T)
    case reset
    case noChange
    
    public static func use(_ value: T?) -> OptionalCopy<T> {
        if let value {
            return .update(value)
        } else {
            return .reset
        }
    }
    
    internal func update(using current: T?) -> T? {
        switch self {
            case .update(let new): return new
            case .reset: return nil
            case .noChange: return current
        }
    }
}

import SwiftUI

{% for type in types.based.Copyable %}
{% if type.variables.count > 0 %}
{% call includeImports type %}
        
extension {{ type.name }} {
    public typealias {{ type.name }}OptionalCopy<T> = OptionalCopy<T>
    
    public func copy(
        {% for property in type.variables|instance|!computed where property.readAccess != "private" and property.readAccess != "fileprivate" %}
        {% ifnot property.isOptional %}
        {{ property.name }}: {{ property.typeName }}? = nil{% ifnot forloop.last %}, {% endif %}
        {% else %}
        {{ property.name }}: {{ type.name }}OptionalCopy<{{ property.typeName.unwrappedTypeName }}> = .noChange{% ifnot forloop.last %}, {% endif %}
        {% endif %}
        {% endfor %}
    ) -> {{ type.name }} {
        return {{ type.name }}(
            {% for property in type.variables|instance|!computed where property.readAccess != "private" and property.readAccess != "fileprivate" %}
            {% ifnot property.isOptional %}
            {{ property.name }}: {{ property.name }} ?? self.{{ property.name }}{% ifnot forloop.last %}, {% endif %}
            {% else %}
            {{ property.name }}: {{ property.name }}.update(using: self.{{ property.name }}){% ifnot forloop.last %}, {% endif %}
            {% endif %}
            {% endfor %}
        )
    }
}

final class {{ type.name }}Builder: ObservableObject {
    {% for property in type.variables|instance|!computed where property.readAccess != "private" and property.readAccess != "fileprivate" %}
    private var _{{ property.name }}: {{ property.typeName }}{% ifnot property.isOptional %}!{% endif %}
    
    var {{ property.name }}: {{ property.typeName }}{% ifnot property.isOptional %}?{% endif %} {
        get { _{{ property.name }} }
        set {
            _{{ property.name }} = newValue
            objectWillChange.send()
        }
    }
    @discardableResult
    func with({{ property.name }}: {{ property.typeName }}) -> Self {
        _{{ property.name }} = {{ property.name }}
        return self
    }
    {% endfor %}

    func readyToBuild() -> Bool {
    {% for property in type.variables|instance|!computed where property.readAccess != "private" and property.readAccess != "fileprivate" and property.isOptional == false %}
        _{{ property.name }} != nil{% ifnot forloop.last %} &&{% endif %}
    {% endfor %}
    }
    
    func buildSafely() throws -> {{ type.name }} {
        guard readyToBuild() else {
            // TODO: improve by providing which values are missing
            throw NSError(domain: "Can't create instance of '{{ type.name }}', not all required values have been provided.", code: 0)
        }
        return build()
    }
    
    func build() -> {{ type.name }} {
        {{ type.name }}(
            {%- for property in type.variables|instance|!computed where property.readAccess != "private" and property.readAccess != "fileprivate" %}
            {{ property.name }}: _{{ property.name }}{% ifnot forloop.last %}, {% endif %}
            {% endfor -%}
        )
    }
}

import Combine

protocol {{ type.name }}Changeable: ObservableObject {
    {% for property in type.variables|instance|!computed where property.readAccess != "private" and property.readAccess != "fileprivate" %}
    var {{ property.name }}: {{ property.typeName }} { get set }
    {% endfor %}
}

extension {{ type.name }} {
    func updater() -> {{ type.name }}Updater {
        .init({{ type.name|lowerFirstLetter }}: self)
    }
}

{% macro assignProperties type source %}
    {% for property in type.variables|instance|!computed where property.readAccess != "private" and property.readAccess != "fileprivate" %}
        _{{ property.name }} = {{ source }}.{{ property.name }}
    {% endfor %}
{% endmacro %}

final class {{ type.name }}Updater: {{ type.name }}Changeable {
    private let initial: {{ type.name }}
    
    {% for property in type.variables|instance|!computed where property.readAccess != "private" and property.readAccess != "fileprivate" %}
    private var _{{ property.name }}: {{ property.typeName }} {
        willSet { objectWillChange.send() }
    }
    var {{ property.name }}: {{ property.typeName }} {
        get { _{{ property.name }} }
        set { _{{ property.name }} = newValue }
    }
    @discardableResult
    func with({{ property.name }}: {{ property.typeName }}) -> Self {
        _{{ property.name }} = {{ property.name }}
        return self
    }
    {% endfor %}

    init({{ type.name|lowerFirstLetter }}: {{ type.name }}) {
        self.initial = {{ type.name|lowerFirstLetter }}
        {% call assignProperties type type.name|lowerFirstLetter %}
    }
    
    {% if type.based.Equatable %}
    func hasChanges() -> Bool {
        initial != build()
    }
    {% endif %}
    
    func update(using {{ type.name|lowerFirstLetter }}: {{ type.name }}) {
        {% call assignProperties type type.name|lowerFirstLetter %}
    }
    
    func reset() {
        update(using: initial)
    }
    
    func build() -> {{ type.name }} {
        {{ type.name }}(
            {%- for property in type.variables|instance|!computed where property.readAccess != "private" and property.readAccess != "fileprivate" %}
            {{ property.name }}: _{{ property.name }}{% ifnot forloop.last %}, {% endif %}
            {% endfor -%}
        )
    }
}
{% endif %}
{% endfor %}
