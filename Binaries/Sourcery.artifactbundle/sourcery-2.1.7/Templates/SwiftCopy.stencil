// Template name: SwiftCopy
// Template version: 1.0

import Foundation
{% macro includeImports type %}
    {% for import in type.imports %}
import {{ import }}
    {% endfor %}
{% endmacro %}

public enum OptionalCopy<T> {
    case update(T)
    case reset
    case noChange
    
    public static func use(_ value: T?) -> OptionalCopy<T> {
        if let value {
            return .update(value)
        } else {
            return .reset
        }
    }
    
    internal func update(using current: T?) -> T? {
        switch self {
            case .update(let new): return new
            case .reset: return nil
            case .noChange: return current
        }
    }
}

{% macro funcParameter type property isLast %}
        {% ifnot property.isOptional %}
        {{ property.name }}: {{ property.typeName }}? = nil{% ifnot isLast %}, {% endif %}
        {% else %}
        {{ property.name }}: {{ type.name }}OptionalCopy<{{ property.typeName.unwrappedTypeName }}> = .noChange{% ifnot isLast %}, {% endif %}
        {% endif %}
{% endmacro %}

{% macro initParameter type property isLast %}
            {% ifnot property.isOptional %}
            {{ property.name }}: {{ property.name }} ?? self.{{ property.name }}{% ifnot isLast %}, {% endif %}
            {% else %}
            {{ property.name }}: {{ property.name }}.update(using: self.{{ property.name }}){% ifnot isLast %}, {% endif %}
            {% endif %}
{% endmacro %}

{% macro iterate type generate %}
    {% if type.allMethods|initializer|count == 0 %}
        {% for property in type.variables|instance|!computed where property.readAccess != "private" and property.readAccess != "fileprivate" and property.defaultValue == nil %}
            {% call generate type property forloop.last %}
        {% endfor %}
    {% endif %}
    
    {% for initializer in type.allMethods|initializer %}
        {% for parameter in initializer.parameters %}
            {% call generate type parameter forloop.last %}
        {% endfor %}
    {% endfor %}
{% endmacro %}

import SwiftUI

{% for type in types.based.Copyable %}
{% if type.variables.count > 0 %}
{% call includeImports type %}

// MARK: {{ type.name }} - Copy

extension {{ type.name }} {
    public typealias {{ type.name }}OptionalCopy<T> = OptionalCopy<T>
    
    public func copy(
        {% call iterate type funcParameter %}
    ) -> {{ type.name }} {
        return {{ type.name }}(
            {% call iterate type initParameter %}
        )
    }
}

{% macro privateValueCheck type property isLast %}
            {% if property.isOptional %}
            true {% ifnot forloop.last %} &&{% endif %} // optional '{{ property.name }}' not required to check
            {% else %}
            _{{ property.name }} != nil {% ifnot forloop.last %} &&{% endif %}
            {% endif %}
{% endmacro %}

{% macro privateInitAssignment type property isLast %}
                {{ property.name }}: _{{ property.name }}{% ifnot forloop.last %}, {% endif %}
{% endmacro %}

// MARK: {{ type.name }} - Builder

{% macro builderSetter type property isLast %}
        private var _{{ property.name }}: {{ property.typeName }}{% ifnot property.isOptional %}!{% endif %} {
            willSet { objectWillChange.send() }
            didSet { objectDidChange.send() }
        }

        var {{ property.name }}: {{ property.typeName }}{% ifnot property.isOptional %}?{% endif %} {
            get { _{{ property.name }} }
            set { _{{ property.name }} = newValue }
        }

        @discardableResult
        func with({{ property.name }}: {{ property.typeName }}) -> Self {
            _{{ property.name }} = {{ property.name }}
            return self
        }
{% endmacro %}

extension {{ type.name }} {
    final class Builder: ObservableObject {
        let objectDidChange = PassthroughSubject<Void, Never>()
    
        {% call iterate type builderSetter %}

        func readyToBuild() -> Bool {
            {% call iterate type privateValueCheck %}
        }
    
        func buildSafely() throws -> {{ type.name }} {
            guard readyToBuild() else {
                // TODO: improve by providing which values are missing
                throw NSError(domain: "Can't create instance of '{{ type.name }}', not all required values have been provided.", code: 0)
            }
            return build()
        }
    
        func build() -> {{ type.name }} {
            {{ type.name }}(
                {% call iterate type privateInitAssignment %}
            )
        }
    }
}

// MARK: {{ type.name }} - Updater

import Combine

{% macro privateAssignment type property isLast %}
                {{ property.name }}: _{{ property.name }}{% ifnot forloop.last %}, {% endif %}
{% endmacro %}

{% macro protocolMembers type property isLast %}
        var {{ property.name }}: {{ property.typeName }} { get set }
{% endmacro %}

{% macro sourceAssignment type property isLast %}
            _{{ property.name }} = {{ type.name|lowerFirstLetter }}.{{ property.name }}
{% endmacro %}

{% macro assignProperties type %}
    {% call iterate type sourceAssignment %}
{% endmacro %}

{% macro updaterSetter type property isLast %}
        private var _{{ property.name }}: {{ property.typeName }} {
            willSet { if notifyUpdates { objectWillChange.send() } }
            didSet { if notifyUpdates { objectDidChange.send() } }
        }
        
        var {{ property.name }}: {{ property.typeName }} {
            get { _{{ property.name }} }
            set { _{{ property.name }} = newValue }
        }
        
        @discardableResult
        func with({{ property.name }}: {{ property.typeName }}) -> Self {
            _{{ property.name }} = {{ property.name }}
            return self
        }
{% endmacro %}

extension {{ type.name }} {

    protocol Changeable: ObservableObject {
        {% call iterate type protocolMembers %}
    }
    
    func updater() -> Updater {
        .init({{ type.name|lowerFirstLetter }}: self)
    }

    final class Updater: Changeable {
        private let initial: {{ type.name }}
        private var notifyUpdates = true
    
        let objectDidChange = PassthroughSubject<Void, Never>()
    
        {% call iterate type updaterSetter %}

        init({{ type.name|lowerFirstLetter }}: {{ type.name }}) {
            self.initial = {{ type.name|lowerFirstLetter }}
            {% call assignProperties type %}
        }
    
    {% if type.based.Equatable %}
        func hasChanges() -> Bool {
            initial != build()
        }
    {% endif %}
    
        func update(using {{ type.name|lowerFirstLetter }}: {{ type.name }}) {
            notifyUpdates = false
            objectWillChange.send()
            
            {% call assignProperties type %}
            
            notifyUpdates = true
            objectDidChange.send()
        }
        
        func reset() {
            update(using: initial)
        }
        
        func build() -> {{ type.name }} {
            {{ type.name }}(
                {% call iterate type privateInitAssignment %}
            )
        }
    }
}
{% endif %}
{% endfor %}
